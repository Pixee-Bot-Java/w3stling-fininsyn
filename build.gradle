buildscript {
	ext {
		springBootVersion = '2.0.4.RELEASE'
	}
	repositories {
		mavenCentral()
        jcenter()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath 'com.bmuschko:gradle-docker-plugin:3.4.1'
	}
}

plugins {
    id 'com.bmuschko.docker-remote-api' version '3.4.1'
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage

group = 'com.apptastic'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
    jcenter()

    maven {
        url 'https://dl.bintray.com/apptastic/maven-repo'
    }
}


dependencies {
	compile('org.springframework.boot:spring-boot-starter-data-mongodb-reactive')
	compile('org.twitter4j:twitter4j-core:4.0.6')
    compile('com.apptastic:insynsregistret:1.0.4')
	compile('com.apptastic:blankningsregistret:1.0.5')
    compile('com.apptastic:rssreader:1.0.5')
    compile('com.apptastic:tickersymbol:1.1.2')
    compile('org.apache.commons:commons-lang3:3.7')
    compile('org.apache.poi:poi-ooxml:3.17')
    compile('net.swisstech:bitly-api-client:0.8.0')
    testCompile('com.aries:docker-java-shaded:3.0.14')
	testCompile('org.springframework.boot:spring-boot-starter-test')
}

docker {
    registryCredentials {
        username = getConfigurationProperty('DOCKER_USERNAME', 'docker.username')
        password = getConfigurationProperty('DOCKER_PASSWORD', 'docker.password')
        email = getConfigurationProperty('DOCKER_EMAIL', 'docker.email')
    }
}

String getConfigurationProperty(String envVar, String sysProp) {
    System.getenv(envVar) ?: project.findProperty(sysProp)
}

task copyReport(type: Copy) {
    from file("${buildDir}/reports/my-report.pdf")
    into file("${buildDir}/toArchive")
}

task createDockerfile(type: Dockerfile) {
    destFile = project.file('build/docker/Dockerfile')
    from 'openjdk:8-jre-alpine'
    maintainer 'Apptastic "apptastic.software@gmail.com"'
    copyFile jar.archiveName, '/app/fininsyn.jar'
    entryPoint 'java'
    defaultCommand '-jar', '/app/fininsyn.jar'
    //exposePort 8080
    //runCommand 'apk --update --no-cache add curl'
    //instruction 'HEALTHCHECK CMD curl -f http://localhost:8080/health || exit 1'
    runCommand 'apk add --no-cache tzdata'
    environmentVariable('TZ', 'Europe/Stockholm')
}

task syncAppArchive(type: Sync) {
    dependsOn assemble
    from jar.archivePath
    into createDockerfile.destFile.parentFile
}

task buildImage(type: DockerBuildImage) {
    dependsOn createDockerfile
    inputDir = createDockerfile.destFile.parentFile
    tag = "w3stling/fininsyn:$jar.version"
}

task pushImage(type: DockerPushImage) {
    dependsOn buildImage
    conventionMapping.imageName = { buildImage.getTag() }
}
